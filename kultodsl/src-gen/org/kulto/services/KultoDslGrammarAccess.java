/*
 * generated by Xtext 2.10.0
 */
package org.kulto.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KultoDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class KultoModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.KultoModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsRootElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//KultoModel:
		//	elements+=RootElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=RootElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//RootElement
		public RuleCall getElementsRootElementParserRuleCall_0() { return cElementsRootElementParserRuleCall_0; }
	}
	public class RootElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.RootElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainPackageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDomainParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cApplicationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RootElement:
		//	Type | DomainPackage | Domain | Application;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | DomainPackage | Domain | Application
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//DomainPackage
		public RuleCall getDomainPackageParserRuleCall_1() { return cDomainPackageParserRuleCall_1; }
		
		//Domain
		public RuleCall getDomainParserRuleCall_2() { return cDomainParserRuleCall_2; }
		
		//Application
		public RuleCall getApplicationParserRuleCall_3() { return cApplicationParserRuleCall_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.' '*';
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.' '*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Primitive | DomainType;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive | DomainType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//DomainType
		public RuleCall getDomainTypeParserRuleCall_1() { return cDomainTypeParserRuleCall_1; }
	}
	public class DomainTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.DomainType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DomainType:
		//	Ennum | Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//Ennum | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Ennum
		public RuleCall getEnnumParserRuleCall_0() { return cEnnumParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Primitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cJavaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJavaTypeSTRINGTerminalRuleCall_3_0 = (RuleCall)cJavaTypeAssignment_3.eContents().get(0);
		
		//Primitive:
		//	'primitive:' name=ID 'java:' javaType=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'primitive:' name=ID 'java:' javaType=STRING
		public Group getGroup() { return cGroup; }
		
		//'primitive:'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'java:'
		public Keyword getJavaKeyword_2() { return cJavaKeyword_2; }
		
		//javaType=STRING
		public Assignment getJavaTypeAssignment_3() { return cJavaTypeAssignment_3; }
		
		//STRING
		public RuleCall getJavaTypeSTRINGTerminalRuleCall_3_0() { return cJavaTypeSTRINGTerminalRuleCall_3_0; }
	}
	public class EnnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Ennum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPopisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPopisPopisParserRuleCall_3_0 = (RuleCall)cPopisAssignment_3.eContents().get(0);
		private final Assignment cLiteralsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralsEnnumLiteralParserRuleCall_4_0 = (RuleCall)cLiteralsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Ennum:
		//	'enum:' name=ID '{'
		//	popis=Popis?
		//	literals+=EnnumLiteral* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum:' name=ID '{' popis=Popis? literals+=EnnumLiteral* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum:'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//popis=Popis?
		public Assignment getPopisAssignment_3() { return cPopisAssignment_3; }
		
		//Popis
		public RuleCall getPopisPopisParserRuleCall_3_0() { return cPopisPopisParserRuleCall_3_0; }
		
		//literals+=EnnumLiteral*
		public Assignment getLiteralsAssignment_4() { return cLiteralsAssignment_4; }
		
		//EnnumLiteral
		public RuleCall getLiteralsEnnumLiteralParserRuleCall_4_0() { return cLiteralsEnnumLiteralParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.EnnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPopisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPopisPopisParserRuleCall_1_0 = (RuleCall)cPopisAssignment_1.eContents().get(0);
		
		//EnnumLiteral:
		//	name=ID popis=Popis?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID popis=Popis?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//popis=Popis?
		public Assignment getPopisAssignment_1() { return cPopisAssignment_1; }
		
		//Popis
		public RuleCall getPopisPopisParserRuleCall_1_0() { return cPopisPopisParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPopisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPopisPopisParserRuleCall_4_0 = (RuleCall)cPopisAssignment_4.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//	'entity:' name=ID ('extends>' superType=[Entity|QualifiedName])? '{'
		//	popis=Popis?
		//	attributes+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity:' name=ID ('extends>' superType=[Entity|QualifiedName])? '{' popis=Popis? attributes+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity:'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends>' superType=[Entity|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends>'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[Entity|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[Entity|QualifiedName]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeEntityQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//popis=Popis?
		public Assignment getPopisAssignment_4() { return cPopisAssignment_4; }
		
		//Popis
		public RuleCall getPopisPopisParserRuleCall_4_0() { return cPopisPopisParserRuleCall_4_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyAsteriskKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		private final Assignment cPopisAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPopisPopisParserRuleCall_4_0 = (RuleCall)cPopisAssignment_4.eContents().get(0);
		
		//Attribute:
		//	'atr:' name=ID type=[Type|QualifiedName] many?='*'? popis=Popis?;
		@Override public ParserRule getRule() { return rule; }
		
		//'atr:' name=ID type=[Type|QualifiedName] many?='*'? popis=Popis?
		public Group getGroup() { return cGroup; }
		
		//'atr:'
		public Keyword getAtrKeyword_0() { return cAtrKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_2_0_1; }
		
		//many?='*'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'*'
		public Keyword getManyAsteriskKeyword_3_0() { return cManyAsteriskKeyword_3_0; }
		
		//popis=Popis?
		public Assignment getPopisAssignment_4() { return cPopisAssignment_4; }
		
		//Popis
		public RuleCall getPopisPopisParserRuleCall_4_0() { return cPopisPopisParserRuleCall_4_0; }
	}
	public class DomainPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.DomainPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesDomainTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DomainPackage:
		//	'package:' name=QualifiedName '{'
		//	imports+=Import*
		//	types+=DomainType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package:' name=QualifiedName '{' imports+=Import* types+=DomainType* '}'
		public Group getGroup() { return cGroup; }
		
		//'package:'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//types+=DomainType*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }
		
		//DomainType
		public RuleCall getTypesDomainTypeParserRuleCall_4_0() { return cTypesDomainTypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPopisAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPopisPopisParserRuleCall_3_0 = (RuleCall)cPopisAssignment_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenDomainChildParserRuleCall_4_0 = (RuleCall)cChildrenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Domain:
		//	'domain:' name=ID '{'
		//	popis=Popis?
		//	children+=DomainChild*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'domain:' name=ID '{' popis=Popis? children+=DomainChild* '}'
		public Group getGroup() { return cGroup; }
		
		//'domain:'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//popis=Popis?
		public Assignment getPopisAssignment_3() { return cPopisAssignment_3; }
		
		//Popis
		public RuleCall getPopisPopisParserRuleCall_3_0() { return cPopisPopisParserRuleCall_3_0; }
		
		//children+=DomainChild*
		public Assignment getChildrenAssignment_4() { return cChildrenAssignment_4; }
		
		//DomainChild
		public RuleCall getChildrenDomainChildParserRuleCall_4_0() { return cChildrenDomainChildParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DomainChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.DomainChild");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDomainPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DomainChild:
		//	DomainPackage | DomainType;
		@Override public ParserRule getRule() { return rule; }
		
		//DomainPackage | DomainType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DomainPackage
		public RuleCall getDomainPackageParserRuleCall_0() { return cDomainPackageParserRuleCall_0; }
		
		//DomainType
		public RuleCall getDomainTypeParserRuleCall_1() { return cDomainTypeParserRuleCall_1; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDomainsDomainCrossReference_3_0 = (CrossReference)cDomainsAssignment_3.eContents().get(0);
		private final RuleCall cDomainsDomainIDTerminalRuleCall_3_0_1 = (RuleCall)cDomainsDomainCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDomainsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDomainsDomainCrossReference_4_1_0 = (CrossReference)cDomainsAssignment_4_1.eContents().get(0);
		private final RuleCall cDomainsDomainIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDomainsDomainCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Application:
		//	'application:' name=ID '{'
		//	domains+=[Domain] (',' domains+=[Domain])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'application:' name=ID '{' domains+=[Domain] (',' domains+=[Domain])* '}'
		public Group getGroup() { return cGroup; }
		
		//'application:'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//domains+=[Domain]
		public Assignment getDomainsAssignment_3() { return cDomainsAssignment_3; }
		
		//[Domain]
		public CrossReference getDomainsDomainCrossReference_3_0() { return cDomainsDomainCrossReference_3_0; }
		
		//ID
		public RuleCall getDomainsDomainIDTerminalRuleCall_3_0_1() { return cDomainsDomainIDTerminalRuleCall_3_0_1; }
		
		//(',' domains+=[Domain])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//domains+=[Domain]
		public Assignment getDomainsAssignment_4_1() { return cDomainsAssignment_4_1; }
		
		//[Domain]
		public CrossReference getDomainsDomainCrossReference_4_1_0() { return cDomainsDomainCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDomainsDomainIDTerminalRuleCall_4_1_0_1() { return cDomainsDomainIDTerminalRuleCall_4_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PopisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.kulto.KultoDsl.Popis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPopisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Popis:
		//	'popis:' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'popis:' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'popis:'
		public Keyword getPopisKeyword_0() { return cPopisKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final KultoModelElements pKultoModel;
	private final RootElementElements pRootElement;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ImportElements pImport;
	private final TypeElements pType;
	private final DomainTypeElements pDomainType;
	private final PrimitiveElements pPrimitive;
	private final EnnumElements pEnnum;
	private final EnnumLiteralElements pEnnumLiteral;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final DomainPackageElements pDomainPackage;
	private final DomainElements pDomain;
	private final DomainChildElements pDomainChild;
	private final ApplicationElements pApplication;
	private final PopisElements pPopis;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KultoDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pKultoModel = new KultoModelElements();
		this.pRootElement = new RootElementElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pImport = new ImportElements();
		this.pType = new TypeElements();
		this.pDomainType = new DomainTypeElements();
		this.pPrimitive = new PrimitiveElements();
		this.pEnnum = new EnnumElements();
		this.pEnnumLiteral = new EnnumLiteralElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pDomainPackage = new DomainPackageElements();
		this.pDomain = new DomainElements();
		this.pDomainChild = new DomainChildElements();
		this.pApplication = new ApplicationElements();
		this.pPopis = new PopisElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.kulto.KultoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//KultoModel:
	//	elements+=RootElement*;
	public KultoModelElements getKultoModelAccess() {
		return pKultoModel;
	}
	
	public ParserRule getKultoModelRule() {
		return getKultoModelAccess().getRule();
	}
	
	//RootElement:
	//	Type | DomainPackage | Domain | Application;
	public RootElementElements getRootElementAccess() {
		return pRootElement;
	}
	
	public ParserRule getRootElementRule() {
		return getRootElementAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.' '*';
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Type:
	//	Primitive | DomainType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DomainType:
	//	Ennum | Entity;
	public DomainTypeElements getDomainTypeAccess() {
		return pDomainType;
	}
	
	public ParserRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}
	
	//Primitive:
	//	'primitive:' name=ID 'java:' javaType=STRING;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Ennum:
	//	'enum:' name=ID '{'
	//	popis=Popis?
	//	literals+=EnnumLiteral* '}';
	public EnnumElements getEnnumAccess() {
		return pEnnum;
	}
	
	public ParserRule getEnnumRule() {
		return getEnnumAccess().getRule();
	}
	
	//EnnumLiteral:
	//	name=ID popis=Popis?;
	public EnnumLiteralElements getEnnumLiteralAccess() {
		return pEnnumLiteral;
	}
	
	public ParserRule getEnnumLiteralRule() {
		return getEnnumLiteralAccess().getRule();
	}
	
	//Entity:
	//	'entity:' name=ID ('extends>' superType=[Entity|QualifiedName])? '{'
	//	popis=Popis?
	//	attributes+=Attribute*
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//	'atr:' name=ID type=[Type|QualifiedName] many?='*'? popis=Popis?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//DomainPackage:
	//	'package:' name=QualifiedName '{'
	//	imports+=Import*
	//	types+=DomainType*
	//	'}';
	public DomainPackageElements getDomainPackageAccess() {
		return pDomainPackage;
	}
	
	public ParserRule getDomainPackageRule() {
		return getDomainPackageAccess().getRule();
	}
	
	//Domain:
	//	'domain:' name=ID '{'
	//	popis=Popis?
	//	children+=DomainChild*
	//	'}';
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//DomainChild:
	//	DomainPackage | DomainType;
	public DomainChildElements getDomainChildAccess() {
		return pDomainChild;
	}
	
	public ParserRule getDomainChildRule() {
		return getDomainChildAccess().getRule();
	}
	
	//Application:
	//	'application:' name=ID '{'
	//	domains+=[Domain] (',' domains+=[Domain])*
	//	'}';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Popis:
	//	'popis:' text=STRING;
	public PopisElements getPopisAccess() {
		return pPopis;
	}
	
	public ParserRule getPopisRule() {
		return getPopisAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
