/**
 * generated by Xtext
 */
package org.kulto.formatting;

import java.util.List;
import java.util.Set;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.kulto.services.KultoDslGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class KultoDslFormatter extends AbstractDeclarativeFormatter {
  private KultoDslGrammarAccess ga;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    IGrammarAccess _grammarAccess = this.getGrammarAccess();
    this.ga = ((KultoDslGrammarAccess) _grammarAccess);
    c.setAutoLinewrap(180);
    FormattingConfig _config = this.getConfig();
    this.genericFormatting(_config);
    FormattingConfig _config_1 = this.getConfig();
    this.focusedFormatting(_config_1);
  }
  
  /**
   * In your implementation of
   * {@link AbstractDeclarativeFormatter#configureFormatting(org.eclipse.xtext.formatting.impl.FormattingConfig)}
   * you may call this generic formatting method first. It indents blocks
   * between curly braces and sets a linewrap before each keyword. Add your
   * own behavior afterwards, e.g.
   * 
   * <pre>
   *   keywords = grammar.findKeywords(...)
   *   for (final Keyword keyword : keywords) {
   *    config.setNoLinewrap().before(keyword)
   *   }
   * </pre>
   */
  public void genericFormatting(final FormattingConfig it) {
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this.grammar.findKeywordPairs("{", "}");
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        FormattingConfig.SpaceLocator _setSpace = it.setSpace(" ");
        Keyword _first = pair.getFirst();
        _setSpace.before(_first);
        Keyword _first_1 = pair.getFirst();
        Keyword _second = pair.getSecond();
        it.setIndentation(_first_1, _second);
        FormattingConfig.LinewrapLocator _setLinewrap = it.setLinewrap(1, 2, 2);
        Keyword _first_2 = pair.getFirst();
        _setLinewrap.after(_first_2);
        FormattingConfig.LinewrapLocator _setLinewrap_1 = it.setLinewrap(1);
        Keyword _second_1 = pair.getSecond();
        _setLinewrap_1.before(_second_1);
      }
    }
    Grammar _grammar = this.grammar.getGrammar();
    final Set<String> allKeywords = GrammarUtil.getAllKeywords(_grammar);
    int _size = allKeywords.size();
    String[] _newArrayOfSize = new String[_size];
    String[] _array = allKeywords.<String>toArray(_newArrayOfSize);
    final List<Keyword> keywords = this.grammar.findKeywords(_array);
    for (final Keyword keyword : keywords) {
      FormattingConfig.LinewrapLocator _setLinewrap = it.setLinewrap();
      _setLinewrap.before(keyword);
    }
    FormattingConfig.LinewrapLocator _setLinewrap_1 = it.setLinewrap(0, 0, 1);
    TerminalRule _sL_COMMENTRule = this.ga.getSL_COMMENTRule();
    _setLinewrap_1.before(_sL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_2 = it.setLinewrap(0, 1, 2);
    TerminalRule _mL_COMMENTRule = this.ga.getML_COMMENTRule();
    _setLinewrap_2.before(_mL_COMMENTRule);
    FormattingConfig.LinewrapLocator _setLinewrap_3 = it.setLinewrap(0, 1, 1);
    TerminalRule _mL_COMMENTRule_1 = this.ga.getML_COMMENTRule();
    _setLinewrap_3.after(_mL_COMMENTRule_1);
  }
  
  public void focusedFormatting(final FormattingConfig it) {
    final KultoDslGrammarAccess.PrimitiveElements primitive = this.ga.getPrimitiveAccess();
    FormattingConfig.LinewrapLocator _setLinewrap = it.setLinewrap(1, 1, 2);
    Keyword _primitiveKeyword_0 = primitive.getPrimitiveKeyword_0();
    _setLinewrap.before(_primitiveKeyword_0);
    FormattingConfig.NoLinewrapLocator _setNoLinewrap = it.setNoLinewrap();
    Keyword _javaKeyword_2 = primitive.getJavaKeyword_2();
    _setNoLinewrap.before(_javaKeyword_2);
    final KultoDslGrammarAccess.EnnumElements ennum = this.ga.getEnnumAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_1 = it.setLinewrap(1, 1, 2);
    Keyword _enumKeyword_0 = ennum.getEnumKeyword_0();
    _setLinewrap_1.before(_enumKeyword_0);
    final KultoDslGrammarAccess.EnnumLiteralElements ennumLiteral = this.ga.getEnnumLiteralAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_2 = it.setLinewrap(1, 1, 2);
    Assignment _nameAssignment_0 = ennumLiteral.getNameAssignment_0();
    _setLinewrap_2.before(_nameAssignment_0);
    FormattingConfig.NoLinewrapLocator _setNoLinewrap_1 = it.setNoLinewrap();
    Assignment _popisAssignment_1 = ennumLiteral.getPopisAssignment_1();
    _setNoLinewrap_1.before(_popisAssignment_1);
    final KultoDslGrammarAccess.EntityElements entity = this.ga.getEntityAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_3 = it.setLinewrap(1, 1, 2);
    Keyword _entityKeyword_0 = entity.getEntityKeyword_0();
    _setLinewrap_3.before(_entityKeyword_0);
    FormattingConfig.LinewrapLocator _setLinewrap_4 = it.setLinewrap(1, 1, 2);
    RuleCall _popisPopisParserRuleCall_4_0 = entity.getPopisPopisParserRuleCall_4_0();
    _setLinewrap_4.before(_popisPopisParserRuleCall_4_0);
    final KultoDslGrammarAccess.AttributeElements attribute = this.ga.getAttributeAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_5 = it.setLinewrap(1, 1, 2);
    Keyword _atrKeyword_0 = attribute.getAtrKeyword_0();
    _setLinewrap_5.before(_atrKeyword_0);
    FormattingConfig.NoLinewrapLocator _setNoLinewrap_2 = it.setNoLinewrap();
    Keyword _manyAsteriskKeyword_3_0 = attribute.getManyAsteriskKeyword_3_0();
    _setNoLinewrap_2.before(_manyAsteriskKeyword_3_0);
    FormattingConfig.NoLinewrapLocator _setNoLinewrap_3 = it.setNoLinewrap();
    Assignment _popisAssignment_4 = attribute.getPopisAssignment_4();
    _setNoLinewrap_3.before(_popisAssignment_4);
    final KultoDslGrammarAccess.ApplicationElements application = this.ga.getApplicationAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_6 = it.setLinewrap(1, 1, 2);
    Keyword _applicationKeyword_0 = application.getApplicationKeyword_0();
    _setLinewrap_6.before(_applicationKeyword_0);
    FormattingConfig.NoLinewrapLocator _setNoLinewrap_4 = it.setNoLinewrap();
    Keyword _commaKeyword_4_0 = application.getCommaKeyword_4_0();
    _setNoLinewrap_4.before(_commaKeyword_4_0);
    FormattingConfig.NoSpaceLocator _setNoSpace = it.setNoSpace();
    Keyword _commaKeyword_4_0_1 = application.getCommaKeyword_4_0();
    _setNoSpace.before(_commaKeyword_4_0_1);
    final KultoDslGrammarAccess.PopisElements popis = this.ga.getPopisAccess();
    FormattingConfig.LinewrapLocator _setLinewrap_7 = it.setLinewrap(1, 1, 2);
    Keyword _popisKeyword_0 = popis.getPopisKeyword_0();
    _setLinewrap_7.before(_popisKeyword_0);
  }
}
